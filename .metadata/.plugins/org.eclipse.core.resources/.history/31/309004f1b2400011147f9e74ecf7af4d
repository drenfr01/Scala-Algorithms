object Problem47 {
  
  var primeList = List[Boolean]()
  val PRIME_LIMIT = 100000;

  def main(args : Array[String]) : Unit = {
    calculatePrimes(PRIME_LIMIT)
    findConsecutivePrimes(4)
    
  }
  
  //recursive because why not?
  def findConsecutivePrimes(numPrimesFound : Int, firstPrimeInSequence : Int) = {
    
    if(numPrimesFound == 4) {
      return firstPrimeInSequence
    }
    else if{
      
      
    }
       
    
  }
  
  //using Sieve of Eratosthenes, but returns list of prime numbers
  def calculatePrimes(n: Int): Unit = {
    var primeArray = new Array[Boolean](n + 1)
    for (i <- 1 to n) {
      primeArray(i) = true;
    }

    for (i <- 2 to n / 2) {
      if (primeArray(i) == true) {
        var constant = 2;
        var j = constant * i;
        while (j <= n) {
          primeArray(j) = false
          constant += 1
          j = constant * i
        }
      }
    }
    
    
  }
  
  

}
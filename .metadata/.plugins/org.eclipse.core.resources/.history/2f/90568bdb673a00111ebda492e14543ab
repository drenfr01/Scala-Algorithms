object Problem50 {

  var primeArray = Array[Boolean]()

  def main(args: Array[String]): Unit = {
    var primeList = calculatePrimes(1000)
   
      
    
    println(primeList)
    
  }
  
  //can do this recursively
  def calculateSumOfMostConsequtivePrimes(list : List[Int] ) : Int = {
    var sum = 0
    var maxPrimeSum = 0
    

    return maxPrimeSum
  }

  //using Sieve of Eratosthenes
  def calculatePrimes(n: Int): List[Int] = {
    var primeList = List[Int]()

    primeArray = new Array[Boolean](n + 1)
    for (i <- 2 to n) {
      primeArray(i) = true;
    }

    for (i <- 2 to n / 2) {
      if (primeArray(i) == true) {
        var constant = 2;
        var j = constant * i;
        while (j <= n) {
          primeArray(j) = false
          constant += 1
          j = constant * i
        }
      }
    }

    for (i <- 1 to n) {
      if (primeArray(i) == true) {
        primeList = primeList ++ List(i)
      }
    }
    return primeList
  }
}
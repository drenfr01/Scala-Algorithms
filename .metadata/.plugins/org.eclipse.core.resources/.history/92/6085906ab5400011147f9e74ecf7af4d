object Problem47 {
  
  var primeList = List[Int]()
  val PRIME_LIMIT = 100000;

  def main(args : Array[String]) : Unit = {
    calculatePrimes(PRIME_LIMIT)
    println(findConsecutivePrimes)
  }
  
  
  def findConsecutivePrimes : Int = {
    
    //look four numbers behind (list is reversed)
    for(prime <- primeList)
    {
      if(primeList.contains(prime-4) && primeList.contains(prime-3) && primeList.contains(prime-2))
      {
        return prime
      }
    }
    
    
    
    
  }
  
  //using Sieve of Eratosthenes, but returns list of prime numbers
  def calculatePrimes(n: Int): Unit = {
    var primeArray = new Array[Boolean](n + 1)
    for (i <- 1 to n) {
      primeArray(i) = true;
    }

    for (i <- 2 to n / 2) {
      if (primeArray(i) == true) {
        var constant = 2;
        var j = constant * i;
        while (j <= n) {
          primeArray(j) = false
          constant += 1
          j = constant * i
        }
      }
    }
    
    //easier to do iteratively 
    for(i <- 2 to n)
    {
      if (primeArray(i) == true)
       primeList =  primeList.+:(i)
    }
        
  }
  
  

}